<?php

namespace app\components\parser\news;

use app\components\helper\nai4rus\AbstractBaseParser;
use app\components\helper\nai4rus\PreviewNewsDTO;
use app\components\parser\NewsPost;
use DateTimeImmutable;
use DateTimeZone;
use RuntimeException;
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\DomCrawler\UriResolver;
use Throwable;

class ProseverouralskRuParser extends AbstractBaseParser
{
    /*run*/
    public const USER_ID = 2;
    public const FEED_ID = 2;

    protected function getSiteUrl(): string
    {
        return 'https://proseverouralsk.ru';
    }

    protected function getPreviewNewsDTOList(int $minNewsCount = 10, int $maxNewsCount = 100): array
    {
        $previewNewsDTOList = [];

        $uriPreviewPage = UriResolver::resolve('/local/rss.php', $this->getSiteUrl());

        try {
            $previewNewsContent = $this->getPageContent($uriPreviewPage);
            $previewNewsCrawler = new Crawler($previewNewsContent);
        } catch (Throwable $exception) {
            if (count($previewNewsDTOList) < $minNewsCount) {
                throw new RuntimeException('Не удалось получить достаточное кол-во новостей', null, $exception);
            }
        }

        $previewNewsCrawler = $previewNewsCrawler->filterXPath('//item');

        $previewNewsCrawler->each(function (Crawler $newsPreview) use (&$previewNewsDTOList, $maxNewsCount) {
            if (count($previewNewsDTOList) >= $maxNewsCount) {
                return;
            }

            $title = $newsPreview->filterXPath('//title')->text();
            $uri = $newsPreview->filterXPath('//link')->text();

            $publishedAtString = $newsPreview->filterXPath('//pubDate')->text();
            $publishedAt = DateTimeImmutable::createFromFormat(DATE_RFC1123, $publishedAtString);
            $publishedAtUTC = $publishedAt->setTimezone(new DateTimeZone('UTC'));

            $previewNewsDTOList[] = new PreviewNewsDTO($uri, $publishedAtUTC, $title, null);
        });

        $previewNewsDTOList = array_slice($previewNewsDTOList, 0, $maxNewsCount);

        return $previewNewsDTOList;
    }

    protected function parseNewsPage(PreviewNewsDTO $previewNewsDTO): NewsPost
    {
        $description = $previewNewsDTO->getDescription();
        $uri = $previewNewsDTO->getUri();

        $newsPage = $this->getPageContent($uri);

        $newsPageCrawler = new Crawler($newsPage);

        $image = null;
        $mainImageCrawler = $newsPageCrawler->filterXPath('//div[contains(@class,"widget-media__content")]//img[1]')->first();
        if ($this->crawlerHasNodes($mainImageCrawler)) {
            $image = $mainImageCrawler->attr('src');
            $this->removeDomNodes($newsPageCrawler, '//div[contains(@class,"widget-media__content")]//img[1]');
        }
        if ($image !== null && $image !== '') {
            $image = UriResolver::resolve($image, $uri);
            $previewNewsDTO->setImage($this->encodeUri($image));
        }

        $newsPostCrawler = $newsPageCrawler->filter('.list-sections__list .js-mediator-article');
        $this->removeDomNodes($newsPostCrawler, '//div[contains(@class,"piktowrapper-embed")]');

        $contentCrawler = $newsPostCrawler;

        $descriptionCrawler = $contentCrawler->filterXPath('//b[1]');
        if ($this->crawlerHasNodes($descriptionCrawler)) {
            $descriptionText = $descriptionCrawler->text();
            if (mb_strlen($descriptionText) > 60) {
                $description = $descriptionText;
            }
        }

        if ($description && $description !== '') {
            $previewNewsDTO->setDescription($description);
        }

        $this->purifyNewsPostContent($contentCrawler);

        $newsPostItemDTOList = $this->parseNewsPostContent($contentCrawler, $previewNewsDTO);

        return $this->factoryNewsPost($previewNewsDTO, $newsPostItemDTOList, 50);
    }

    protected function factoryNewsPost(PreviewNewsDTO $newsPostDTO, array $newsPostItems, int $descLength = 200): NewsPost
    {
        $uri = $newsPostDTO->getUri();
        $image = $newsPostDTO->getImage();

        $title = $newsPostDTO->getTitle();
        if (!$title) {
            throw new InvalidArgumentException('Объект NewsPostDTO не содержит заголовка новости');
        }

        $publishedAt = $newsPostDTO->getPublishedAt() ?: new DateTimeImmutable();
        $publishedAtFormatted = $publishedAt->format('Y-m-d H:i:s');

        $emptyDescriptionKey = 'EmptyDescription';
        $autoGeneratedDescription = '';
        $description = $newsPostDTO->getDescription() ?: $emptyDescriptionKey;

        $newsPost = new NewsPost(static::class, $title, $description, $publishedAtFormatted, $uri, $image);


        foreach ($newsPostItems as $newsPostItemDTO) {
            if ($newsPost->image === null && $newsPostItemDTO->isImage()) {
                $newsPost->image = $newsPostItemDTO->getImage();
                continue;
            }

            if ($newsPostItemDTO->isImage() && $newsPost->image === $newsPostItemDTO->getImage()) {
                continue;
            }

            if ($newsPost->description !== $emptyDescriptionKey) {
                $newsPost->addItem($newsPostItemDTO->factoryNewsPostItem());
                continue;
            }

            if (!$newsPostItemDTO->isImage() && mb_strlen($autoGeneratedDescription) < $descLength) {
                $autoGeneratedDescription .= $newsPostItemDTO->getText() ?: '';
                continue;
            }

            $newsPost->addItem($newsPostItemDTO->factoryNewsPostItem());
        }

        if ($newsPost->description === $emptyDescriptionKey) {
            if ($autoGeneratedDescription !== '') {
                $newsPost->description = trim($autoGeneratedDescription);
                return $newsPost;
            }

            $newsPost->description = $newsPost->title;
        }

        return $newsPost;
    }
}
